# Temperature And Humidity
# BME680

# A bunch of fudging of temp+humidity has to be done because these sensors are super offset.
# If I was doing it properly, I'd actually get one set with a calibrated sensor for a while.
sensor:
  - platform: bme680
    temperature:
      name: "Temperature"
      oversampling: 16x
      id: temperature
      filters:
        - offset: -5.8
    pressure:
      name: "Pressure"
      id: pressure
    humidity:
      name: "Humidity"
      id: humidity
      filters:
      # Based on a linear regression analysis from comparison with airqual humidity, might not be 100% correct.
        - offset: -6.17
        #- multiply: 1.29
        - multiply: 1.4

    gas_resistance:
      name: "Gas Resistance"
      id: gas_resistance

    address: 0x77
    update_interval: 60s
    # Uncommenting this line disables the heater, confusingly.
    # But if it's disabled, the gas test becomes useless, and the temp+humidity
    # don't seem to actually get any more accurate.
    # heater: #disabled

  - platform: template
    name: "IAQ Value"
    id: iaq
    icon: "mdi:gauge"
    # calculation: comp_gas = log(R_gas[ohm]) + 0.04 log(Ohm)/%rh * hum[%rh]
    lambda: |-
      return log(id(gas_resistance).state) + 0.04 *  id(humidity).state;
    state_class: "measurement"

text_sensor:
  - platform: template
    name: "IAQ Summary"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if (int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) <= 500) {
        return {"Extremely polluted"};
      }
      else {
        return {"unknown"};
      }
